generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model access_levels {
  id           BigInt    @id @default(autoincrement())
  accesslevels String    @db.String(255)
  usersid      BigInt
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users     @relation(fields: [usersid], references: [id], onDelete: Cascade)
}

model chemical_association {
  id         BigInt     @id @default(autoincrement())
  created_at DateTime   @default(now()) @db.Timestamp(6)
  stepid     BigInt?
  chemicalid BigInt?
  percentage Float?
  dosage     Float?
  chemicals  chemicals? @relation(fields: [chemicalid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chemical")
  steps      steps?     @relation(fields: [stepid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_step")
}

model chemicals {
  id                   BigInt                 @id @default(autoincrement())
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  name                 String?                @unique(map: "unique_chemical_name") @db.String(255)
  kg_per_can           BigInt?
  type_and_use         String?                @db.String(255)
  cost_per_unit        Decimal?               @db.Decimal(10, 2)
  unit_used            String?                @db.String(255)
  unit_conversion      Decimal?               @db.Decimal(10, 2)
  cost_per_kg          Decimal?               @db.Decimal(10, 2)
  full_name            String?                @db.String(255)
  free                 Decimal?               @db.Decimal(10, 2)
  on_order             Decimal?               @db.Decimal(10, 2)
  total                Decimal?               @db.Decimal(10, 2)
  requirement          Decimal?               @db.Decimal(10, 2)
  order                Decimal?               @db.Decimal(10, 2)
  boxes                Float?
  cost                 Decimal?               @db.Decimal(10, 2)
  cost_uom             Decimal?               @db.Decimal(10, 2)
  chemical_association chemical_association[]
}

model history {
  id         BigInt   @id @default(autoincrement())
  title      String?  @db.String(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       BigInt?
  users      users?   @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_history_user")
}

model recipes {
  id           BigInt   @id(map: "recipe_pkey") @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamp(6)
  load_size    BigInt?
  machine_type String?  @db.String(255)
  finish       String?  @db.String(255)
  fabric       String?  @db.String(255)
  recipe       BigInt?  @unique(map: "unique_recipe_name")
  fno          String?  @db.String(255)
  name         String?  @db.String(255)
  active_flag  String?  @db.String(255)
  steps        steps[]
}

model steps {
  id                   BigInt                 @id @default(autoincrement())
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  action               String?                @db.String(255)
  liters               BigInt?
  rpm                  BigInt?
  centigrade           BigInt?
  ph                   String?                @db.String(255)
  lr                   String?                @db.String(255)
  tds                  String?                @db.String(255)
  tss                  String?                @db.String(255)
  recipesid            BigInt?
  step_no              String?                @db.String(255)
  minutes              String?                @db.String(255)
  step_id              BigInt
  modified_action      String?                @db.String(255)
  chemical_association chemical_association[]
  recipes              recipes?               @relation(fields: [recipesid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_stept_table")
}

model users {
  id            BigInt          @id @default(autoincrement())
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  username      String          @unique(map: "unique_username") @db.String(255)
  password      String          @db.String(255)
  name          String          @db.String(255)
  department    String?         @db.String(255)
  designation   String?         @db.String(255)
  cnic          String?         @db.String(255)
  code          String          @db.String(255)
  manager       String?         @db.String(255)
  bank          String?         @db.String(255)
  phone         String?         @db.String(255)
  account       String?         @db.String(255)
  createdby     String?         @db.String(255)
  updatedby     String?         @db.String(255)
  access_levels access_levels[]
  history       history[]
  recipe_log    recipe_log[]
}

model recipe_log {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  status     String?  @db.String(255)
  recipeFno  BigInt?
  userid     BigInt?
  users      users?   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model dmc_ammend_failed_records {
  id             BigInt    @id @default(autoincrement())
  po_number      String?
  plan_hod       String?
  country        String?
  order_qty      String?
  carton_qty     String?
  gross_weight   String?
  carton_cbm     String?
  ctn_type       String?
  booking_id     String?
  booking_status String?
  timestamp      DateTime? @db.Timestamp(6)
}

model dmc_ammend_success_records {
  id             BigInt    @id @default(autoincrement())
  po_number      String?
  plan_hod       String?
  country        String?
  order_qty      String?
  carton_qty     String?
  gross_weight   String?
  carton_cbm     String?
  ctn_type       String?
  booking_id     String?
  booking_status String?
  timestamp      DateTime? @db.Timestamp(6)
}

model dmc_failed_records {
  id             BigInt    @id @default(autoincrement())
  po_number      String?
  plan_hod       String?
  country        String?
  order_qty      String?
  carton_qty     String?
  gross_weight   String?
  carton_cbm     String?
  ctn_type       String?
  booking_id     String?
  booking_status String?
  timestamp      DateTime? @db.Timestamptz(6)
}

model dmc_success_records {
  id             BigInt   @id @default(autoincrement())
  po_number      String?
  plan_hod       String?
  country        String?
  order_qty      String?
  carton_qty     String?
  gross_weight   String?
  carton_cbm     String?
  ctn_type       String?
  booking_id     String?
  booking_status String?
  timestamp      DateTime @db.Timestamptz(6)
  rowid          BigInt   @default(autoincrement())
}

model nxs_failed_records {
  id                                 BigInt    @id @default(autoincrement())
  po_number                          BigInt?
  assign_equipment_id                String?   @db.String(50)
  booking_number                     String?   @db.String(50)
  shipment_load_type                 String?   @db.String(200)
  invoice_number                     String?
  bill_waybill                       String?   @db.String(50)
  carrier                            String?   @db.String(50)
  updated_transload_location_us_only String?   @db.String(50)
  estimated_departure_date           DateTime? @db.Date
  equipment_number_type              String?   @db.String(50)
  seal_number                        BigInt?
  ctn_qty                            BigInt?
  units                              BigInt?
  route_number                       BigInt?
  status                             String?
  timestamp                          DateTime? @db.Timestamp(6)
}

model nxs_success_records {
  id                                 BigInt    @id @default(autoincrement())
  po_number                          BigInt?
  assign_equipment_id                String?   @db.String(50)
  booking_number                     String?   @db.String(50)
  shipment_load_type                 String?   @db.String(200)
  invoice_number                     String?
  bill_waybill                       String?   @db.String(50)
  carrier                            String?   @db.String(50)
  updated_transload_location_us_only String?   @db.String(50)
  estimated_departure_date           DateTime? @db.Date
  equipment_number_type              String?   @db.String(50)
  seal_number                        BigInt?
  ctn_qty                            BigInt?
  units                              BigInt?
  route_number                       BigInt?
  status                             String?
  timestamp                          DateTime? @db.Timestamp(6)
}
